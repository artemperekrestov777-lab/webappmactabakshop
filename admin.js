// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å JavaScript
const API_URL = 'http://localhost:3000/api';
const ADMIN_PASSWORD = 'f3-YmUt2AP-JYt';

let currentEditProduct = null;
let allProducts = [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');

    if (token) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        validateToken(token);
    } else {
        document.getElementById('loginScreen').style.display = 'flex';
    }
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
async function validateToken(token) {
    try {
        // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        const payload = parseJwt(token);

        if (payload && payload.role === 'admin' && payload.exp * 1000 > Date.now()) {
            showAdminPanel();
        } else {
            document.getElementById('loginScreen').style.display = 'flex';
        }
    } catch (error) {
        document.getElementById('loginScreen').style.display = 'flex';
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ JWT —Ç–æ–∫–µ–Ω–∞
function parseJwt(token) {
    try {
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));

        return JSON.parse(jsonPayload);
    } catch (error) {
        return null;
    }
}

// –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function adminLogin() {
    const password = document.getElementById('adminPassword').value;

    if (password === ADMIN_PASSWORD) {
        showAdminPanel();
    } else {
        document.getElementById('loginError').textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
function showAdminPanel() {
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('adminPanel').style.display = 'block';
    loadProducts();
}

// –í—ã—Ö–æ–¥
function logout() {
    window.location.href = '/';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function showAddProduct() {
    currentEditProduct = null;
    document.getElementById('formTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
    document.getElementById('productForm').style.display = 'block';
    clearForm();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—è –≤–µ—Å–∞
function toggleWeightField() {
    const unit = document.getElementById('productUnit').value;
    const weightGroup = document.getElementById('weightGroup');

    if (unit === '–≤–µ—Å') {
        weightGroup.style.display = 'block';
        document.getElementById('productWeight').required = true;
    } else {
        weightGroup.style.display = 'none';
        document.getElementById('productWeight').required = false;
    }
}

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function previewImage() {
    const file = document.getElementById('productImage').files[0];
    const preview = document.getElementById('imagePreview');

    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            preview.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
        };
        reader.readAsDataURL(file);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function saveProduct() {
    const productData = {
        name: document.getElementById('productName').value.trim(),
        category: document.getElementById('productCategory').value,
        unit: document.getElementById('productUnit').value,
        price: parseInt(document.getElementById('productPrice').value),
        description: document.getElementById('productDescription').value.trim(),
        productId: generateProductId()
    };

    if (productData.unit === '–≤–µ—Å') {
        productData.weight = parseInt(document.getElementById('productWeight').value);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!productData.name || !productData.category || !productData.unit || !productData.price) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }

    showLoader();

    try {
        let response;
        if (currentEditProduct) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            response = await fetch(`${API_URL}/admin/product/${currentEditProduct._id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(productData)
            });
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            response = await fetch(`${API_URL}/admin/product`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(productData)
            });
        }

        const result = await response.json();

        if (result.success) {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            const imageFile = document.getElementById('productImage').files[0];
            if (imageFile) {
                await uploadImage(result.product._id || result.product.id, imageFile);
            }

            alert(currentEditProduct ? '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω' : '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
            cancelForm();
            loadProducts();
            syncWithGitHub();
        } else {
            alert('–û—à–∏–±–∫–∞: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    } finally {
        hideLoader();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function uploadImage(productId, file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = async function(e) {
            try {
                const response = await fetch(`${API_URL}/admin/product/image`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId: productId,
                        imageData: e.target.result
                    })
                });

                const result = await response.json();
                if (result.success) {
                    resolve(result.imageUrl);
                } else {
                    reject(new Error(result.error));
                }
            } catch (error) {
                reject(error);
            }
        };
        reader.readAsDataURL(file);
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç–æ–≤–∞—Ä–∞
function generateProductId() {
    return 'prod_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

// –û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã
function cancelForm() {
    document.getElementById('productForm').style.display = 'none';
    clearForm();
    currentEditProduct = null;
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
function clearForm() {
    document.getElementById('productName').value = '';
    document.getElementById('productCategory').value = '';
    document.getElementById('productUnit').value = '';
    document.getElementById('productWeight').value = '';
    document.getElementById('productPrice').value = '';
    document.getElementById('productDescription').value = '';
    document.getElementById('productImage').value = '';
    document.getElementById('imagePreview').innerHTML = '';
    document.getElementById('weightGroup').style.display = 'none';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function loadProducts() {
    showLoader();

    try {
        const response = await fetch(`${API_URL}/admin/products`);
        const result = await response.json();

        if (result.success) {
            allProducts = result.products || [];
            displayProducts(allProducts);
        } else {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            allProducts = window.productsData || [];
            displayProducts(allProducts);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        allProducts = window.productsData || [];
        displayProducts(allProducts);
    } finally {
        hideLoader();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
function displayProducts(products) {
    const container = document.getElementById('productsTable');
    container.innerHTML = '';

    if (products.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666;">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    products.forEach(product => {
        const item = document.createElement('div');
        item.className = 'product-item';

        const imageHtml = product.imageUrl || product.image
            ? `<img src="${product.imageUrl || product.image}" alt="${product.name}" class="product-item-image">`
            : `<div class="product-item-image">üì¶</div>`;

        item.innerHTML = `
            ${imageHtml}
            <div class="product-item-info">
                <div class="product-item-name">${product.name}</div>
                <div class="product-item-details">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${getCategoryName(product.category)} |
                    ${product.unit === '–≤–µ—Å' ? `–í–µ—Å: ${product.weight}–≥` : '–®—Ç—É–∫–∞'}
                </div>
            </div>
            <div class="product-item-price">${product.price}‚ÇΩ</div>
            <div class="product-item-actions">
                <button class="edit-btn" onclick='editProduct(${JSON.stringify(product).replace(/'/g, "\\'")})'>‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button class="delete-btn" onclick="deleteProduct('${product._id || product.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;

        container.appendChild(item);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryName(categoryId) {
    const categories = {
        'new': '–ù–æ–≤–∏–Ω–∫–∏',
        'standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–ª–µ–Ω–¥—ã',
        'aromatic': '–ê—Ä–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–µ–Ω–¥—ã',
        'pipe': '–¢—Ä—É–±–æ—á–Ω—ã–µ –±–ª–µ–Ω–¥—ã',
        'gilzy': '–°–∏–≥–∞—Ä–µ—Ç–Ω—ã–µ –≥–∏–ª—å–∑—ã',
        'custom': '–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä',
        'mactabak': '–ü—Ä–æ–¥—É–∫—Ü–∏—è –æ—Ç –ú–ê–ö–¢–ê–ë–ê–ö',
        'pipes': '–ö—É—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä—É–±–∫–∏',
        'machines': '–ú–∞—à–∏–Ω–∫–∏ –¥–ª—è –Ω–∞–±–∏–≤–∫–∏',
        'tea': '–ö–∏—Ç–∞–π—Å–∫–∏–π —á–∞–π',
        'tamper': '–¢–∞–º–ø–µ—Ä'
    };
    return categories[categoryId] || categoryId;
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
function editProduct(product) {
    currentEditProduct = product;
    document.getElementById('formTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    document.getElementById('productName').value = product.name;
    document.getElementById('productCategory').value = product.category;
    document.getElementById('productUnit').value = product.unit;
    document.getElementById('productPrice').value = product.price;
    document.getElementById('productDescription').value = product.description || '';

    if (product.unit === '–≤–µ—Å') {
        document.getElementById('weightGroup').style.display = 'block';
        document.getElementById('productWeight').value = product.weight;
    }

    if (product.imageUrl || product.image) {
        document.getElementById('imagePreview').innerHTML =
            `<img src="${product.imageUrl || product.image}" alt="Preview">`;
    }

    document.getElementById('productForm').style.display = 'block';
    window.scrollTo(0, 0);
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async function deleteProduct(productId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
        return;
    }

    showLoader();

    try {
        const response = await fetch(`${API_URL}/admin/product/${productId}`, {
            method: 'DELETE'
        });

        const result = await response.json();

        if (result.success) {
            alert('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω');
            loadProducts();
            syncWithGitHub();
        } else {
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + result.error);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    } finally {
        hideLoader();
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
function filterProducts() {
    const category = document.getElementById('filterCategory').value;

    if (category === 'all') {
        displayProducts(allProducts);
    } else {
        const filtered = allProducts.filter(p => p.category === category);
        displayProducts(filtered);
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub
async function syncWithGitHub() {
    showLoader();

    try {
        const response = await fetch(`${API_URL}/admin/sync`, {
            method: 'POST'
        });

        const result = await response.json();

        if (result.success) {
            alert('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
            alert('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        alert('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub');
    } finally {
        hideLoader();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫
function showLoader() {
    document.getElementById('loader').style.display = 'flex';
}

// –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫
function hideLoader() {
    document.getElementById('loader').style.display = 'none';
}