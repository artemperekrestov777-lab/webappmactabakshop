const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const bodyParser = require('body-parser');
const { RateLimiterMemory } = require('rate-limiter-flexible');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const connectDB = require('../config/database');
const orderController = require('./controllers/orderController');
const adminController = require('./controllers/adminController');
const Order = require('./models/Order');
const User = require('./models/User');
const Product = require('./models/Product');

// –ü–µ—Ä–µ–¥–∞—á–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
setTimeout(() => {
    orderController.setBot(bot);
    adminController.setBot(bot);
}, 100);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const app = express();

// –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
const lockFile = path.join(__dirname, '../bot.lock');
if (fs.existsSync(lockFile)) {
    console.log('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ');
    process.exit(0);
}
fs.writeFileSync(lockFile, process.pid.toString());

process.on('exit', () => {
    if (fs.existsSync(lockFile)) {
        fs.unlinkSync(lockFile);
    }
});

process.on('SIGINT', () => {
    if (fs.existsSync(lockFile)) {
        fs.unlinkSync(lockFile);
    }
    process.exit(0);
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB();

// Middleware –¥–ª—è Express
app.use(helmet({
    contentSecurityPolicy: false
}));
app.use(compression());
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è WebApp
app.use('/webapp', express.static(path.join(__dirname, '../webapp')));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
if (!fs.existsSync(path.join(__dirname, '../logs'))) {
    fs.mkdirSync(path.join(__dirname, '../logs'), { recursive: true });
}
app.use(morgan('combined', {
    stream: fs.createWriteStream(path.join(__dirname, '../logs/access.log'), { flags: 'a' })
}));

// Rate limiting
const rateLimiter = new RateLimiterMemory({
    points: 10,
    duration: 1,
});

const antiFloodLimiter = new RateLimiterMemory({
    points: 30,
    duration: 60,
});

// –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
const userMessageCounts = new Map();

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        await rateLimiter.consume(userId);
        await antiFloodLimiter.consume(userId);
    } catch (rejRes) {
        console.log(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    handleMessage(msg);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = await User.findOne({ telegramId: userId });
        if (!user) {
            user = new User({
                telegramId: userId,
                username: msg.from.username,
                firstName: msg.from.first_name,
                lastName: msg.from.last_name,
                lastActivity: new Date()
            });
            await user.save();
        } else {
            user.lastActivity = new Date();
            await user.save();
        }

        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
        const welcomeMessage = `
üõçÔ∏è *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!*

*–ú–ê–ö–¢–ê–ë–ê–ö*
*–õ—É—á—à–∏–π –¢–∞–±–∞—á–Ω—ã–π –ú–∞–≥–∞–∑–∏–Ω*

–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!
–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–∞–±–∞—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏.
`;

        const keyboard = {
            inline_keyboard: [[
                {
                    text: 'üõí –ö–∞—Ç–∞–ª–æ–≥',
                    web_app: { url: 'https://artemperekrestov777-lab.github.io/webappmactabakshop/' }
                }
            ]]
        };

        await bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã
        const activeOrder = await Order.findOne({
            userId: userId,
            status: 'cart',
            updatedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
        });

        if (activeOrder && activeOrder.items.length > 0) {
            setTimeout(async () => {
                await bot.sendMessage(chatId,
                    '‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ!\n' +
                    '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.\n' +
                    '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.',
                    {
                        reply_markup: {
                            inline_keyboard: [[
                                {
                                    text: 'üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É',
                                    web_app: { url: `${process.env.WEBAPP_URL}#cart` }
                                }
                            ]]
                        }
                    }
                );
            }, 3000);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
bot.onText(/\/admin(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const fullCommand = match[1].trim();

    console.log(`Admin command received from user ${userId}, full command: "${fullCommand}"`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (userId !== parseInt(process.env.ADMIN_ID)) {
        await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if (!fullCommand) {
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /admin <–ø–∞—Ä–æ–ª—å>');
        return;
    }

    if (fullCommand !== process.env.ADMIN_PASSWORD) {
        await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.');
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    const baseUrl = process.env.NODE_ENV === 'production'
        ? process.env.WEBAPP_URL
        : `http://localhost:${process.env.PORT || 3000}`;
    const adminUrl = `${baseUrl}/admin.html?token=${generateAdminToken(userId)}`;

    await bot.sendMessage(chatId,
        'üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.',
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: '‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
                        web_app: { url: adminUrl }
                    }
                ]]
            }
        }
    );
});

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if (process.env.NODE_ENV !== 'production') {
    bot.on('message', (msg) => {
        console.log(`Message received: "${msg.text}" from user ${msg.from.id}`);
    });
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
function generateAdminToken(userId) {
    const jwt = require('jsonwebtoken');
    return jwt.sign(
        { userId, role: 'admin', exp: Math.floor(Date.now() / 1000) + (60 * 60) },
        process.env.JWT_SECRET
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    if (text && text.startsWith('/')) {
        return;
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
    const keyboard = {
        inline_keyboard: [[
            {
                text: 'üõí –ö–∞—Ç–∞–ª–æ–≥',
                web_app: { url: process.env.WEBAPP_URL }
            }
        ]]
    };

    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: keyboard
    });
}

// API endpoints
app.post('/api/order', orderController.createOrder);
app.get('/api/order/:orderId', orderController.getOrder);
app.post('/api/order/update', orderController.updateOrder);
app.post('/api/notify-manager', orderController.notifyManager);

// Admin API
app.post('/api/admin/product', adminController.addProduct);
app.put('/api/admin/product/:id', adminController.updateProduct);
app.delete('/api/admin/product/:id', adminController.deleteProduct);
app.get('/api/admin/products', adminController.getProducts);
app.post('/api/admin/sync', adminController.syncWithGitHub);

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
app.post('/webhook', async (req, res) => {
    try {
        const { action, data } = req.body;

        switch (action) {
            case 'order_created':
                await handleOrderCreated(data);
                break;
            case 'payment_confirmed':
                await handlePaymentConfirmed(data);
                break;
            default:
                console.log('Unknown action:', action);
        }

        res.json({ success: true });
    } catch (error) {
        console.error('Webhook error:', error);
        res.status(500).json({ error: error.message });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async function handleOrderCreated(orderData) {
    const { userId, order, isFromMoscow } = orderData;

    if (isFromMoscow) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
        const managerMessage = formatManagerMessage(order);
        await bot.sendMessage(process.env.ADMIN_ID, managerMessage, {
            parse_mode: 'Markdown'
        });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await bot.sendMessage(userId,
            '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n' +
            '–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞.\n' +
            '–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.'
        );
    } else {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç—É
        const qrCodeUrl = await generatePaymentQR(order);
        const paymentMessage = formatPaymentMessage(order, qrCodeUrl);

        await bot.sendPhoto(userId, qrCodeUrl, {
            caption: paymentMessage,
            parse_mode: 'Markdown'
        });
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
function formatManagerMessage(order) {
    let message = `üì¶ *–ù–û–í–´–ô –ó–ê–ö–ê–ó ‚Ññ${order.orderNumber}*\n\n`;
    message += `üë§ *–ö–ª–∏–µ–Ω—Ç:*\n`;
    message += `–§–ò–û: ${order.customer.fullName}\n`;
    message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer.phone}\n`;
    message += `Email: ${order.customer.email}\n`;
    message += `–ê–¥—Ä–µ—Å: ${order.customer.city}, ${order.customer.address}\n`;
    message += `–î–æ—Å—Ç–∞–≤–∫–∞: ${order.customer.deliveryMethod}\n\n`;

    message += `üìã *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n`;
    order.items.forEach(item => {
        message += `‚Ä¢ ${item.name} - ${item.quantity} —à—Ç. x ${item.price}‚ÇΩ = ${item.total}‚ÇΩ\n`;
    });

    message += `\nüí∞ *–ò—Ç–æ–≥–æ: ${order.total}‚ÇΩ*`;

    if (order.customer.comment) {
        message += `\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.customer.comment}`;
    }

    return message;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
function formatPaymentMessage(order, qrCodeUrl) {
    const message = `
üì¶ *–ó–∞–∫–∞–∑ ‚Ññ${order.orderNumber} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω*

–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞ ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏èüëáüèªüëáüèªüëáüèª

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ 1-7 –¥–Ω–µ–π!
(–†–∞—Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 2—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏!)

‚ÄºÔ∏è*–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è–í–ê–ñ–ù–û*‚ÄºÔ∏è
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ *–û–¢–ü–†–ê–í–¨–¢–ï –ß–ï–ö* –Ω–∞ –ø–æ—á—Ç—É: ${process.env.MANAGER_EMAIL}
–í –ø–∏—Å—å–º–µ *–£–ö–ê–ñ–ò–¢–ï –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê*!!!

üö´*–ü–ò–°–¨–ú–û –° –ß–ï–ö–û–ú –î–û–°–¢–ê–¢–û–ß–ù–û –û–¢–ü–†–ê–í–ò–¢–¨ –û–î–ò–ù –†–ê–ó*‚ÄºÔ∏è‚ÄºÔ∏è
(–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —á–µ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —Ç–µ–º —Å–∞–º—ã–º –≤—ã –≤–Ω–æ—Å–∏—Ç–µ –ø—É—Ç–∞–Ω–∏—Ü—É –∏ –≤–∞—à –∑–∞–∫–∞–∑ –≤–æ–≤—Ä–µ–º—è –Ω–µ —É–µ–¥–µ—Ç!!!)

*QR-–∫–æ–¥ –Ω—É–∂–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞*

üìå*–í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–• –ö –ü–õ–ê–¢–ï–ñ–£ –ù–ò–ß–ï–ì–û –ü–ò–°–ê–¢–¨ –ù–ï –ù–£–ñ–ù–û*‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è

(!–í–ê–ñ–ù–û! –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –ù–ï –î–ï–õ–ê–¢–¨ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ 1,2,3, 10 —Ä—É–±–ª–µ–π!!! –ù–∞—Å –∑–∞ —ç—Ç–æ —à—Ç—Ä–∞—Ñ—É—é—Ç!!!! –í–≤–æ–¥–∏—Ç–µ –≤ –ø–æ–ª–µ –ø–æ–ª–Ω—É—é —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ!!)

üí∞ *–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${order.total}‚ÇΩ*
`;

    return message;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
async function generatePaymentQR(order) {
    const QRCode = require('qrcode');
    const paymentData = {
        Name: process.env.PAYMENT_NAME,
        PersonalAcc: process.env.PAYMENT_ACCOUNT,
        BankName: '–ú–û–°–ö–û–í–°–ö–ò–ô –§–ò–õ–ò–ê–õ –ê–û –ö–ë "–ú–û–î–£–õ–¨–ë–ê–ù–ö"',
        BIC: process.env.PAYMENT_BIK,
        Sum: order.total * 100, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        Purpose: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ${order.orderNumber}`,
        PayeeINN: process.env.PAYMENT_INN
    };

    const paymentString = `ST00012|${paymentData.Name}|${paymentData.PersonalAcc}|${paymentData.BankName}|${paymentData.BIC}|${paymentData.Purpose}|${paymentData.Sum}|${paymentData.PayeeINN}`;

    const qrCodePath = path.join(__dirname, '../data/qr', `${order.orderNumber}.png`);
    await QRCode.toFile(qrCodePath, paymentString, {
        width: 400,
        margin: 2
    });

    return qrCodePath;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
async function handlePaymentConfirmed(data) {
    const { orderId, userId } = data;

    const order = await Order.findById(orderId);
    if (order) {
        order.status = 'paid';
        order.paidAt = new Date();
        await order.save();

        await bot.sendMessage(userId,
            '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n' +
            '–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n' +
            '–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ.'
        );

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await bot.sendMessage(process.env.ADMIN_ID,
            `üí∞ –ó–∞–∫–∞–∑ ‚Ññ${order.orderNumber} –æ–ø–ª–∞—á–µ–Ω!`
        );
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –≠–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = bot;

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');