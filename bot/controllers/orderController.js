const Order = require('../models/Order');
const User = require('../models/User');
const Product = require('../models/Product');
const { bot } = require('../index');
const QRCode = require('qrcode');
const path = require('path');
const fs = require('fs');

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ú–æ—Å–∫–≤—ã –∏ –æ–±–ª–∞—Å—Ç–∏
const moscowRegions = [
    '–º–æ—Å–∫–≤–∞', 'moscow', '–º—Å–∫',
    '–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ø–æ–¥–º–æ—Å–∫–æ–≤—å–µ', '–º–æ',
    '–±–∞–ª–∞—à–∏—Ö–∞', '—Ö–∏–º–∫–∏', '–ø–æ–¥–æ–ª—å—Å–∫', '–∫–æ—Ä–æ–ª—ë–≤', '–º—ã—Ç–∏—â–∏',
    '–ª—é–±–µ—Ä—Ü—ã', '–∫—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', '–∫–æ–ª–æ–º–Ω–∞',
    '–æ–¥–∏–Ω—Ü–æ–≤–æ', '–¥–æ–º–æ–¥–µ–¥–æ–≤–æ', '—Å–µ—Ä–ø—É—Ö–æ–≤', '—â—ë–ª–∫–æ–≤–æ',
    '–æ—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ', '—Ä–∞–º–µ–Ω—Å–∫–æ–µ', '–¥–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π', '—Ä–µ—É—Ç–æ–≤',
    '–∂—É–∫–æ–≤—Å–∫–∏–π', '–ø—É—à–∫–∏–Ω–æ', '–Ω–æ–≥–∏–Ω—Å–∫', '—Å–µ—Ä–≥–∏–µ–≤ –ø–æ—Å–∞–¥'
];

const isMoscowRegion = (city, region) => {
    const checkString = `${city} ${region}`.toLowerCase();
    return moscowRegions.some(moscowRegion => checkString.includes(moscowRegion));
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
exports.createOrder = async (req, res) => {
    try {
        const { userId, items, customer } = req.body;

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        const order = new Order({
            userId,
            items,
            customer,
            status: 'pending'
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞
        try {
            order.validateWeightMinimum();
        } catch (error) {
            return res.status(400).json({
                success: false,
                error: error.message
            });
        }

        // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
        order.calculateTotal();

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
        order.isFromMoscow = isMoscowRegion(customer.city, customer.region);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        await order.save();

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        await User.findOneAndUpdate(
            { telegramId: userId },
            {
                savedData: {
                    fullName: customer.fullName,
                    phone: customer.phone,
                    email: customer.email,
                    city: customer.city,
                    region: customer.region,
                    address: customer.address,
                    preferredDelivery: customer.deliveryMethod
                }
            }
        );

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞
        if (order.isFromMoscow) {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
            await notifyManager(order);

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            await bot.sendMessage(userId,
                `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order.orderNumber} –ø—Ä–∏–Ω—è—Ç!\n\n` +
                '–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞.\n' +
                '–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.',
                {
                    reply_markup: {
                        inline_keyboard: [[
                            {
                                text: 'üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥',
                                web_app: { url: process.env.WEBAPP_URL }
                            }
                        ]]
                    }
                }
            );
        } else {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞
            const qrCodePath = await generatePaymentQR(order);
            const paymentMessage = formatPaymentMessage(order);

            await bot.sendPhoto(userId, qrCodePath, {
                caption: paymentMessage,
                parse_mode: 'Markdown'
            });

            // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ QR-–∫–æ–¥–∞
            setTimeout(() => {
                if (fs.existsSync(qrCodePath)) {
                    fs.unlinkSync(qrCodePath);
                }
            }, 60000);
        }

        res.json({
            success: true,
            order: {
                id: order._id,
                orderNumber: order.orderNumber,
                isFromMoscow: order.isFromMoscow
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
exports.getOrder = async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId);

        if (!order) {
            return res.status(404).json({
                success: false,
                error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        res.json({ success: true, order });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
exports.updateOrder = async (req, res) => {
    try {
        const { orderId, status } = req.body;

        const order = await Order.findByIdAndUpdate(
            orderId,
            { status, updatedAt: new Date() },
            { new: true }
        );

        if (!order) {
            return res.status(404).json({
                success: false,
                error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        res.json({ success: true, order });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
};

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
async function notifyManager(order) {
    let message = `üì¶ *–ù–û–í–´–ô –ó–ê–ö–ê–ó ‚Ññ${order.orderNumber}*\n\n`;
    message += `üë§ *–ö–ª–∏–µ–Ω—Ç:*\n`;
    message += `–§–ò–û: ${order.customer.fullName}\n`;
    message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer.phone}\n`;
    message += `Email: ${order.customer.email}\n`;
    message += `–ì–æ—Ä–æ–¥: ${order.customer.city}\n`;
    message += `–ê–¥—Ä–µ—Å: ${order.customer.address}\n`;
    message += `–î–æ—Å—Ç–∞–≤–∫–∞: ${order.customer.deliveryMethod}\n\n`;

    message += `üìã *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n`;
    order.items.forEach(item => {
        const itemTotal = item.price * item.quantity;
        message += `‚Ä¢ ${item.name}\n`;
        message += `  ${item.quantity} ${item.unit === '–≤–µ—Å' ? 'x ' + item.weight + '–≥' : '—à—Ç'} x ${item.price}‚ÇΩ = ${itemTotal}‚ÇΩ\n`;
    });

    message += `\nüì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: ${order.subtotal}‚ÇΩ\n`;
    message += `üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${order.customer.deliveryPrice}‚ÇΩ\n`;
    message += `üí∞ *–ò–¢–û–ì–û: ${order.total}‚ÇΩ*`;

    if (order.customer.comment) {
        message += `\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.customer.comment}`;
    }

    await bot.sendMessage(process.env.ADMIN_ID, message, {
        parse_mode: 'Markdown'
    });
}

exports.notifyManager = async (req, res) => {
    try {
        const { order } = req.body;
        await notifyManager(order);
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
async function generatePaymentQR(order) {
    const paymentData = `ST00012|Name=${process.env.PAYMENT_NAME}|PersonalAcc=${process.env.PAYMENT_ACCOUNT}|BankName=–ú–û–°–ö–û–í–°–ö–ò–ô –§–ò–õ–ò–ê–õ –ê–û –ö–ë "–ú–û–î–£–õ–¨–ë–ê–ù–ö"|BIC=${process.env.PAYMENT_BIK}|Sum=${order.total * 100}|Purpose=–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ${order.orderNumber}|PayeeINN=${process.env.PAYMENT_INN}`;

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è QR-–∫–æ–¥–æ–≤
    const qrDir = path.join(__dirname, '../../data/qr');
    if (!fs.existsSync(qrDir)) {
        fs.mkdirSync(qrDir, { recursive: true });
    }

    const qrCodePath = path.join(qrDir, `${order.orderNumber}.png`);

    await QRCode.toFile(qrCodePath, paymentData, {
        width: 400,
        margin: 2,
        color: {
            dark: '#000000',
            light: '#FFFFFF'
        }
    });

    return qrCodePath;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
function formatPaymentMessage(order) {
    const message = `
üì¶ *–ó–∞–∫–∞–∑ ‚Ññ${order.orderNumber} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω*

–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞ ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏èüëáüèªüëáüèªüëáüèª

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ 1-7 –¥–Ω–µ–π!
(–†–∞—Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 2—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏!)

‚ÄºÔ∏è*–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è–í–ê–ñ–ù–û*‚ÄºÔ∏è
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ *–û–¢–ü–†–ê–í–¨–¢–ï –ß–ï–ö* –Ω–∞ –ø–æ—á—Ç—É: ${process.env.MANAGER_EMAIL}
–í –ø–∏—Å—å–º–µ *–£–ö–ê–ñ–ò–¢–ï –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê*!!!

üö´*–ü–ò–°–¨–ú–û –° –ß–ï–ö–û–ú –î–û–°–¢–ê–¢–û–ß–ù–û –û–¢–ü–†–ê–í–ò–¢–¨ –û–î–ò–ù –†–ê–ó*‚ÄºÔ∏è‚ÄºÔ∏è
(–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —á–µ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)

‚ö†Ô∏è *QR-–∫–æ–¥ –Ω—É–∂–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞*

üìå*–í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–• –ö –ü–õ–ê–¢–ï–ñ–£ –ù–ò–ß–ï–ì–û –ü–ò–°–ê–¢–¨ –ù–ï –ù–£–ñ–ù–û*‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è

(!–í–ê–ñ–ù–û! –ù–ï –î–ï–õ–ê–¢–¨ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ 1,2,3, 10 —Ä—É–±–ª–µ–π!)

üí∞ *–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${order.total}‚ÇΩ*

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É! üôè
`;

    return message;
}