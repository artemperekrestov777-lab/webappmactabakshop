const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const bodyParser = require('body-parser');
const { RateLimiterMemory } = require('rate-limiter-flexible');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const app = express();

// –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if (fs.existsSync(lockFile)) {
    console.log('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ');
    process.exit(0);
}
fs.writeFileSync(lockFile, process.pid.toString());

process.on('exit', () => {
    if (fs.existsSync(lockFile)) {
        fs.unlinkSync(lockFile);
    }
});

process.on('SIGINT', () => {
    if (fs.existsSync(lockFile)) {
        fs.unlinkSync(lockFile);
    }
    process.exit(0);
});

// Middleware –¥–ª—è Express
app.use(helmet({
    contentSecurityPolicy: false
}));
app.use(compression());
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
if (!fs.existsSync(path.join(__dirname, 'logs'))) {
    fs.mkdirSync(path.join(__dirname, 'logs'), { recursive: true });
}
app.use(morgan('combined', {
    stream: fs.createWriteStream(path.join(__dirname, 'logs/access.log'), { flags: 'a' })
}));

// Rate limiting
const rateLimiter = new RateLimiterMemory({
    points: 10,
    duration: 1,
});

const antiFloodLimiter = new RateLimiterMemory({
    points: 30,
    duration: 60,
});

// –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        await rateLimiter.consume(userId);
        await antiFloodLimiter.consume(userId);
    } catch (rejRes) {
        console.log(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    handleMessage(msg);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
        const welcomeMessage = `
üõçÔ∏è *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!*

*–ú–ê–ö–¢–ê–ë–ê–ö*
*–õ—É—á—à–∏–π –¢–∞–±–∞—á–Ω—ã–π –ú–∞–≥–∞–∑–∏–Ω*

–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!
–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–∞–±–∞—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏.
`;

        const keyboard = {
            inline_keyboard: [[
                {
                    text: 'üõí –ö–∞—Ç–∞–ª–æ–≥',
                    web_app: { url: 'https://artemperekrestov777-lab.github.io/webappmactabakshop/webapp/index.html?v=' + Date.now() + "_" + Math.random().toString(36).substr(2, 9) }
                }
            ]]
        };

        await bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
bot.onText(/\/admin(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const fullCommand = match[1].trim();

    console.log(`Admin command received from user ${userId}, full command: "${fullCommand}"`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (userId !== parseInt(process.env.ADMIN_ID)) {
        await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if (!fullCommand) {
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /admin <–ø–∞—Ä–æ–ª—å>');
        return;
    }

    if (fullCommand !== process.env.ADMIN_PASSWORD) {
        await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.');
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    const adminUrl = `https://artemperekrestov777-lab.github.io/webappmactabakshop/admin-telegram-webapp.html?token=${generateAdminToken(userId)}`;

    await bot.sendMessage(chatId,
        'üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\\n\\n' +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.',
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[
                    {
                        text: '‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
                        web_app: { url: adminUrl }
                    }
                ]]
            }
        }
    );
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
function generateAdminToken(userId) {
    const jwt = require('jsonwebtoken');
    return jwt.sign(
        { userId, role: 'admin', exp: Math.floor(Date.now() + "_" + Math.random().toString(36).substr(2, 9) / 1000) + (60 * 60) },
        process.env.JWT_SECRET
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    if (text && text.startsWith('/')) {
        return;
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
    const keyboard = {
        inline_keyboard: [[
            {
                text: 'üõí –ö–∞—Ç–∞–ª–æ–≥',
                web_app: { url: 'https://artemperekrestov777-lab.github.io/webappmactabakshop/webapp/index.html?v=' + Date.now() + "_" + Math.random().toString(36).substr(2, 9) }
            }
        ]]
    };

    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: keyboard
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.post('/api/order', async (req, res) => {
    try {
        const { userId, items, customer } = req.body;

        // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        const orderNumber = Date.now() + "_" + Math.random().toString(36).substr(2, 9).toString();
        const order = {
            orderNumber,
            userId,
            items,
            customer,
            total: items.reduce((sum, item) => sum + (item.price * item.quantity), 0)
        };

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await bot.sendMessage(userId,
            `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${orderNumber} –ø—Ä–∏–Ω—è—Ç!\\n\\n` +
            '–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞.\\n' +
            '–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.',
            {
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥',
                            web_app: { url: 'https://artemperekrestov777-lab.github.io/webappmactabakshop/webapp/index.html?v=' + Date.now() + "_" + Math.random().toString(36).substr(2, 9) }
                        }
                    ]]
                }
            }
        );

        res.json({
            success: true,
            order: {
                id: orderNumber,
                orderNumber: orderNumber
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.get('/api/order/:orderId', async (req, res) => {
    try {
        const { orderId } = req.params;

        res.json({
            success: true,
            order: {
                id: orderId,
                orderNumber: orderId,
                status: 'pending'
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
app.post('/api/order/update', async (req, res) => {
    try {
        const { orderId, status } = req.body;

        res.json({
            success: true,
            order: {
                id: orderId,
                status: status
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');